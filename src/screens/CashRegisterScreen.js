// FILE: src/screens/CashRegisterScreen.js
import React, { useState, useMemo, useContext, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, FlatList, StyleSheet, SafeAreaView, Modal, Alert, LayoutAnimation, Platform, UIManager } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { STORAGE_KEY_CASH_SNAPSHOTS } from '../constants';
import { CashContext } from '../contexts/CashContext';
import { SettingsContext } from '../contexts/SettingsContext';
import { styles as globalStyles, colors, spacing, borderRadius, typography } from '../utils/styles';
import { showCustomAlert } from '../utils/helpers';

if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
    UIManager.setLayoutAnimationEnabledExperimental(true);
}

const PIN_CODE = '19851007';
const denominations = [{ value: 200 }, { value: 100 }, { value: 50 }, { value: 20 }, { value: 10 }, { value: 5 }, { value: 2 }, { value: 1 }, { value: 0.5 }, { value: 0.2 }, { value: 0.1 }, { value: 0.05 }];

const styles = StyleSheet.create({
    safeArea: { flex: 1, backgroundColor: colors.background }, balanceContainer: { paddingVertical: spacing.small, paddingHorizontal: spacing.medium, alignItems: 'center', backgroundColor: colors.surface, borderBottomWidth: 1, borderColor: colors.border }, balanceLabel: { ...typography.body, color: colors.textSecondary }, balanceAmount: { fontSize: 36, fontWeight: 'bold', color: colors.textPrimary, marginVertical: spacing.small/2 }, subBalanceContainer: { flexDirection: 'row', justifyContent: 'space-around', width: '100%' }, subBalanceText: { ...typography.body, color: colors.textSecondary }, actionsGrid: { flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between', padding: spacing.small, backgroundColor: colors.surface, borderBottomWidth: 1, borderColor: colors.border }, actionButton: { width: '48%', paddingVertical: spacing.medium, borderRadius: borderRadius.medium, alignItems: 'center', marginVertical: spacing.small/2, elevation: 2 }, actionButtonText: { color: 'white', fontWeight: 'bold', fontSize: 14 }, zReportButtonContainer: { paddingHorizontal: spacing.medium, paddingTop: spacing.small, paddingBottom: spacing.medium, backgroundColor: colors.surface, borderBottomWidth: 1, borderColor: colors.border }, zReportButton: { backgroundColor: '#16A085', padding: spacing.medium, borderRadius: borderRadius.medium, alignItems: 'center', elevation: 2 }, zReportButtonText: { color: 'white', fontWeight: 'bold', fontSize: 16 }, zReportTotalContainer: { marginVertical: spacing.medium, padding: spacing.medium, backgroundColor: colors.background, borderRadius: borderRadius.small, flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }, zReportTotalText: { fontSize: 16, fontWeight: 'bold', color: colors.textPrimary }, zReportTotalAmount: { fontSize: 16, fontWeight: 'bold', color: colors.primary }, tabContainer: { flexDirection: 'row', backgroundColor: '#FBFBFF', borderBottomWidth: 1, borderBottomColor: colors.border }, tabButton: { flex: 1, padding: spacing.medium, alignItems: 'center', borderBottomWidth: 3, borderBottomColor: 'transparent' }, tabButtonActive: { borderBottomColor: colors.primary }, tabText: { ...typography.body, color: colors.textSecondary, fontWeight: '600' }, tabTextActive: { color: colors.primary }, list: { flex: 1, paddingHorizontal: spacing.medium, paddingTop: spacing.small, paddingBottom: 20 }, modalBackdrop: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.6)', padding: spacing.medium }, amountInput: { borderBottomWidth: 2, borderColor: colors.primary, textAlign: 'center', fontSize: 28, fontWeight: 'bold', padding: spacing.small, marginBottom: spacing.medium, color: colors.textPrimary }, historyItemWrapper: { backgroundColor: colors.surface, borderRadius: borderRadius.medium, marginBottom: spacing.small, overflow: 'hidden' }, historyItem: { flexDirection: 'row', padding: spacing.medium, alignItems: 'center' }, historyIconContainer: { width: 40, height: 40, borderRadius: 20, justifyContent: 'center', alignItems: 'center', backgroundColor: colors.background, marginRight: spacing.medium }, historyIcon: { fontSize: 18 }, historyTextContainer: { flex: 1 }, historyType: { ...typography.body, fontWeight: 'bold', color: colors.textPrimary }, historyDescription: { ...typography.caption, color: colors.textSecondary, fontStyle: 'italic', flexShrink: 1 }, historyDate: { ...typography.caption, color: colors.textSecondary, marginTop: 4 }, historyAmount: { fontSize: 16, fontWeight: 'bold', marginLeft: spacing.small }, amountPositive: { color: colors.accent }, amountNegative: { color: colors.danger }, deleteButton: { padding: spacing.small }, deleteButtonText: { color: colors.danger, fontSize: 22, fontWeight: 'bold' }, counterRow: { flexDirection: 'row', alignItems: 'center', paddingVertical: 4, borderBottomWidth: 1, borderBottomColor: colors.border, paddingHorizontal: 8, gap: spacing.small }, denomLabel: { width: 50, fontSize: 16, color: colors.textPrimary }, countInput: { flex: 1, borderWidth: 1, borderColor: colors.border, borderRadius: 6, paddingVertical: 4, paddingHorizontal: 8, textAlign: 'center', fontSize: 14, backgroundColor: '#fff' }, subtotalLabel: { flex: 2, textAlign: 'right', fontSize: 16, color: colors.textSecondary }, totalRow: { flexDirection: 'row', justifyContent: 'space-between', marginTop: 15, paddingTop: 15, borderTopWidth: 2, borderColor: colors.textPrimary }, totalLabel: { fontSize: 20, fontWeight: 'bold', color: colors.textPrimary }, totalSum: { fontSize: 20, fontWeight: 'bold', color: colors.primary }, snapshotDetails: { paddingHorizontal: spacing.medium, paddingBottom: spacing.medium, paddingTop: spacing.small, borderTopWidth: 1, borderTopColor: colors.border, backgroundColor: '#fdfdfd' }, snapshotDetailsTitle: { fontWeight: 'bold', marginBottom: spacing.small, color: colors.textPrimary, fontSize: typography.caption }, snapshotDetailText: { ...typography.caption, color: colors.textSecondary, marginBottom: 2 },
});

const PinModal = ({ visible, onClose, onConfirm }) => { const [pin, setPin] = useState(''); const handleConfirm = () => { onConfirm(pin); setPin(''); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} transparent={true} animationType="fade"><View style={styles.modalBackdrop}><View style={globalStyles.inputSection}><Text style={globalStyles.inputTitle}>Įveskite PIN kodą</Text><TextInput style={styles.amountInput} value={pin} onChangeText={setPin} placeholder="----" keyboardType="number-pad" autoFocus={true} secureTextEntry={true}/><TouchableOpacity style={globalStyles.button} onPress={handleConfirm}><Text style={globalStyles.buttonText}>Patvirtinti</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Atšaukti</Text></TouchableOpacity></View></View></Modal> );};
const CashCounterModal = ({ visible, onClose, onSave, onUpdate }) => { const initialCounts = useMemo(() => denominations.reduce((acc, denom) => ({...acc, [`val_${String(denom.value).replace('.', '_')}`]: ''}), {}), []); const [counts, setCounts] = useState(initialCounts); const totalSum = useMemo(() => denominations.reduce((sum, denom) => sum + ((parseInt(counts[`val_${String(denom.value).replace('.', '_')}`]) || 0) * denom.value), 0), [counts]); const handleSave = () => { if (totalSum <= 0) return showCustomAlert("Klaida", "Nėra ką saugoti."); onSave({ id: Date.now(), date: new Date().toISOString(), totalSum: totalSum, counts: counts }); setCounts(initialCounts); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} animationType="slide"><SafeAreaView style={{ flex: 1, backgroundColor: colors.background }}><FlatList style={globalStyles.screenContent} ListHeaderComponent={<Text style={globalStyles.inputTitle}>Grynųjų Skaičiuotuvas</Text>} data={denominations} keyExtractor={item => String(item.value)} renderItem={({item: denom}) => { const key = `val_${String(denom.value).replace('.', '_')}`; return (<View style={styles.counterRow}><Text style={styles.denomLabel}>{denom.value.toFixed(2)}</Text><TextInput style={styles.countInput} value={counts[key]} onChangeText={text => setCounts(p => ({...p, [key]: text.replace(/[^0-9]/g, '')}))} placeholder="0" keyboardType="number-pad"/><Text style={styles.subtotalLabel}>= {(denom.value * (parseInt(counts[key]) || 0)).toFixed(2)} EUR</Text></View>); }} ListFooterComponent={ <View style={{marginTop: spacing.medium, paddingBottom: 50}}><View style={styles.totalRow}><Text style={styles.totalLabel}>BENDRA SUMA:</Text><Text style={styles.totalSum}>{totalSum.toFixed(2)} EUR</Text></View><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.primary}]} onPress={() => { onUpdate(totalSum); onClose(); }}><Text style={globalStyles.buttonText}>Atnaujinti Kasos Likutį</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.accent}]} onPress={handleSave}><Text style={globalStyles.buttonText}>Išsaugoti Skaičiavimą</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Uždaryti</Text></TouchableOpacity></View> } /></SafeAreaView></Modal> );};
const IncomeModal = ({ visible, onClose, onConfirm }) => { const [amount, setAmount] = useState(''); const [comment, setComment] = useState(''); const handleConfirm = (type) => { const pAmount = parseFloat(amount.replace(',', '.')); if (isNaN(pAmount) || pAmount <= 0) return showCustomAlert('Klaida', 'Įveskite teigiamą sumą.'); onConfirm(pAmount, type, comment.trim()); setAmount(''); setComment(''); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} transparent={true} animationType="fade"><View style={styles.modalBackdrop}><View style={globalStyles.inputSection}><Text style={globalStyles.inputTitle}>Naujos Įplaukos</Text><TextInput style={styles.amountInput} value={amount} onChangeText={setAmount} placeholder="0.00" keyboardType="decimal-pad" autoFocus={true}/><TextInput style={globalStyles.input} value={comment} onChangeText={setComment} placeholder="Komentaras (neprivaloma)"/><TouchableOpacity style={[globalStyles.button, {marginBottom: spacing.small}]} onPress={() => handleConfirm('cash_in')}><Text style={globalStyles.buttonText}>Į Kasą (Grynais)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {marginBottom: spacing.small}]} onPress={() => handleConfirm('safe_in')}><Text style={globalStyles.buttonText}>Į Seifą (Grynais)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {marginBottom: spacing.small}]} onPress={() => handleConfirm('card_in')}><Text style={globalStyles.buttonText}>Į Banką (Kortele)</Text></TouchableOpacity><TouchableOpacity style={globalStyles.button} onPress={() => handleConfirm('transfer_in')}><Text style={globalStyles.buttonText}>Į Banką (Pavedimu)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Atšaukti</Text></TouchableOpacity></View></View></Modal> );};
const ExpenseModal = ({ visible, onClose, onConfirm }) => { const [amount, setAmount] = useState(''); const [description, setDescription] = useState(''); const handleConfirm = (source) => { const pAmount = parseFloat(amount.replace(',', '.')); if (isNaN(pAmount) || pAmount <= 0) return showCustomAlert('Klaida', 'Įveskite teigiamą sumą.'); if (description.trim() === '') return showCustomAlert('Klaida', 'Įveskite išlaidų paskirtį.'); onConfirm(pAmount, description.trim(), source); setAmount(''); setDescription(''); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} transparent={true} animationType="fade"><View style={styles.modalBackdrop}><View style={globalStyles.inputSection}><Text style={globalStyles.inputTitle}>Išlaidos / Išėmimas</Text><Text style={globalStyles.inputLabel}>Suma (EUR)</Text><TextInput style={styles.amountInput} value={amount} onChangeText={setAmount} placeholder="0.00" keyboardType="decimal-pad" autoFocus={true}/><Text style={globalStyles.inputLabel}>Paskirtis</Text><TextInput style={globalStyles.input} value={description} onChangeText={setDescription} placeholder="Pvz., apmokėjimas už kurą"/><Text style={globalStyles.inputLabel}>Apmokėta iš:</Text><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.warning, marginBottom: spacing.small}]} onPress={() => handleConfirm('cash_out')}><Text style={globalStyles.buttonText}>Grynais (iš kasos)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.warning, marginBottom: spacing.small}]} onPress={() => handleConfirm('safe_out')}><Text style={globalStyles.buttonText}>Grynais (iš seifo)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.warning, marginBottom: spacing.small}]} onPress={() => handleConfirm('transfer_out')}><Text style={globalStyles.buttonText}>Pavedimu (iš banko)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.warning}]} onPress={() => handleConfirm('online_out')}><Text style={globalStyles.buttonText}>Interentu (iš banko)</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Atšaukti</Text></TouchableOpacity></View></View></Modal> );};
const TransferModal = ({ visible, onClose, onConfirm }) => { const [amount, setAmount] = useState(''); const [comment, setComment] = useState(''); const handleConfirm = (type) => { const pAmount = parseFloat(amount.replace(',', '.')); if (isNaN(pAmount) || pAmount <= 0) return showCustomAlert('Klaida', 'Įveskite teigiamą sumą.'); onConfirm(pAmount, type, comment.trim()); setAmount(''); setComment(''); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} transparent={true} animationType="fade"><View style={styles.modalBackdrop}><View style={globalStyles.inputSection}><Text style={globalStyles.inputTitle}>Vidiniai Pervedimai</Text><TextInput style={styles.amountInput} value={amount} onChangeText={setAmount} placeholder="0.00" keyboardType="decimal-pad" autoFocus={true}/><TextInput style={globalStyles.input} value={comment} onChangeText={setComment} placeholder="Komentaras (neprivaloma)"/><TouchableOpacity style={[globalStyles.button, {backgroundColor: '#A569BD', marginBottom: spacing.small}]} onPress={() => handleConfirm('cash_to_safe')}><Text style={globalStyles.buttonText}>Iš Kasos į Seifą</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: '#A569BD', marginBottom: spacing.small}]} onPress={() => handleConfirm('safe_to_cash')}><Text style={globalStyles.buttonText}>Iš Seifo į Kasą</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: '#A569BD', marginBottom: spacing.small}]} onPress={() => handleConfirm('safe_to_bank')}><Text style={globalStyles.buttonText}>Iš Seifo į Banką</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, {backgroundColor: '#A569BD'}]} onPress={() => handleConfirm('bank_to_safe')}><Text style={globalStyles.buttonText}>Iš Banko į Seifą</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Atšaukti</Text></TouchableOpacity></View></View></Modal> );};
const ZReportModal = ({ visible, onClose, onConfirm }) => { const [cash, setCash] = useState(''); const [card, setCard] = useState(''); const [customers, setCustomers] = useState(''); const total = useMemo(() => (parseFloat(String(cash).replace(',', '.')) || 0) + (parseFloat(String(card).replace(',', '.')) || 0), [cash, card]); const handleConfirm = () => { const cashAmount = parseFloat(String(cash).replace(',', '.')) || 0; const cardAmount = parseFloat(String(card).replace(',', '.')) || 0; const customerCount = parseInt(customers, 10) || 0; if (cashAmount < 0 || cardAmount < 0 || customerCount < 0) return showCustomAlert('Klaida', 'Visi laukeliai turi būti teigiami skaičiai.'); if (total === 0) return showCustomAlert('Klaida', 'Bendra apyvarta negali būti nulis.'); onConfirm({ cash: cashAmount, card: cardAmount, customers: customerCount, total: total }); setCash(''); setCard(''); setCustomers(''); onClose(); }; return ( <Modal visible={visible} onRequestClose={onClose} transparent={true} animationType="fade"><View style={styles.modalBackdrop}><View style={globalStyles.inputSection}><Text style={globalStyles.inputTitle}>Z Ataskaitos Suvedimas</Text><Text style={globalStyles.inputLabel}>Suma grynais (EUR)</Text><TextInput style={globalStyles.input} value={cash} onChangeText={setCash} placeholder="0.00" keyboardType="decimal-pad" /><Text style={globalStyles.inputLabel}>Suma kortelėmis (EUR)</Text><TextInput style={globalStyles.input} value={card} onChangeText={setCard} placeholder="0.00" keyboardType="decimal-pad" /><Text style={globalStyles.inputLabel}>Pirkėjų skaičius</Text><TextInput style={globalStyles.input} value={customers} onChangeText={setCustomers} placeholder="0" keyboardType="number-pad" /><View style={styles.zReportTotalContainer}><Text style={styles.zReportTotalText}>Bendra Apyvarta: </Text><Text style={styles.zReportTotalAmount}>{total.toFixed(2)} EUR</Text></View><TouchableOpacity style={[globalStyles.button, {backgroundColor: colors.accent}]} onPress={handleConfirm}><Text style={globalStyles.buttonText}>Patvirtinti Dienos Uždarymą</Text></TouchableOpacity><TouchableOpacity style={[globalStyles.button, globalStyles.cancelButton]} onPress={onClose}><Text style={globalStyles.buttonText}>Atšaukti</Text></TouchableOpacity></View></View></Modal> );};

export default function CashRegisterScreen() {
    const { cashRegisterBalance, setCashRegisterBalance, safeBalance, setSafeBalance, bankBalance, setBankBalance, transactions, addTransaction, removeTransactionById } = useContext(CashContext);
    const { useReversalTransactions, allowDeletingReversals } = useContext(SettingsContext);
    const [modal, setModal] = useState({ income: false, expense: false, transfer: false, counter: false, zReport: false, pin: false });
    const [transactionToDelete, setTransactionToDelete] = useState(null);
    const [snapshots, setSnapshots] = useState([]);
    const [activeTab, setActiveTab] = useState('transactions');
    const [expandedSnapshotId, setExpandedSnapshotId] = useState(null);
    useEffect(() => { const loadSnapshots = async () => { try { const stored = await AsyncStorage.getItem(STORAGE_KEY_CASH_SNAPSHOTS); if (stored) setSnapshots(JSON.parse(stored)); } catch (e) { console.error("Failed to load snapshots", e); } }; loadSnapshots(); }, []);
    const updateSnapshots = async (newSnapshots) => { try { setSnapshots(newSnapshots); await AsyncStorage.setItem(STORAGE_KEY_CASH_SNAPSHOTS, JSON.stringify(newSnapshots)); } catch (e) { console.error("Failed to save snapshots", e); }};
    const handleSaveSnapshot = (newSnapshot) => { updateSnapshots([newSnapshot, ...snapshots]); showCustomAlert("Išsaugota", `Likutis (${newSnapshot.totalSum.toFixed(2)} EUR) sėkmingai išsaugotas.`); };
    const handleDeleteSnapshot = (snapshotId) => { if (!snapshotId) return; Alert.alert("Ištrinti įrašą?", "Ar tikrai norite ištrinti šį išsaugotą skaičiavimą?", [{ text: "Atšaukti", style: "cancel" }, { text: "Ištrinti", style: "destructive", onPress: () => updateSnapshots(snapshots.filter(s => s.id !== snapshotId)) }]); };
    const handlePinConfirm = (pin) => { if (pin === PIN_CODE) { if (transactionToDelete) { initiateTransactionDeletion(transactionToDelete); } } else { showCustomAlert('Klaida', 'Neteisingas PIN kodas.'); } setTransactionToDelete(null); };
    const handleLongPressTransaction = (transaction) => { if (!transaction || !transaction.id) return; if (transaction.type.includes('Atšaukimas') && !allowDeletingReversals) { return showCustomAlert('Negalima', 'Atšauktų operacijų trynimas yra išjungtas nustatymuose.'); } if (transaction.type === 'Dienos uždarymas (Z)') { setTransactionToDelete(transaction); setModal({...modal, pin: true}); } else { initiateTransactionDeletion(transaction); } };
    const initiateTransactionDeletion = (transaction) => { const title = useReversalTransactions ? "Atšaukti operaciją?" : "Ištrinti operaciją?"; const message = useReversalTransactions ? "Bus sukurta atvirkštinė operacija, kuri atstatys balansus. Ar tęsti?" : "Įrašas bus negrįžtamai pašalintas iš istorijos, bet likučiai NEBUS perskaičiuoti. Ar tikrai norite tęsti?"; const confirmText = useReversalTransactions ? "Taip, Atšaukti" : "Taip, Ištrinti"; Alert.alert(title, message, [{ text: "Ne", style: "cancel" }, { text: confirmText, style: "destructive", onPress: () => { if (useReversalTransactions) { const reversalDescription = `Atšaukta operacija (ID: ${transaction.id})`; const { amount, type } = transaction; if (type.includes('Įplaukos (grynais)')) handleExpenseConfirm(amount, reversalDescription, 'cash_out'); else if (type.includes('Įplaukos į seifą')) handleExpenseConfirm(amount, reversalDescription, 'safe_out'); else if (type.includes('Įplaukos (kortele)') || type.includes('Įplaukos (pavedimu)')) handleExpenseConfirm(amount, reversalDescription, 'transfer_out'); else if (type.includes('Išlaidos (iš kasos)')) handleIncomeConfirm(amount, 'cash_in', reversalDescription); else if (type.includes('Išlaidos (iš seifo)')) handleIncomeConfirm(amount, 'safe_in', reversalDescription); else if (type.includes('Išlaidos (pavedimu)') || type.includes('Išlaidos (internetu)')) handleIncomeConfirm(amount, 'transfer_in', reversalDescription); else if (type.includes('Pervedimas į seifą')) handleTransferConfirm(amount, 'safe_to_cash', reversalDescription); else if (type.includes('Pervedimas iš seifo')) handleTransferConfirm(amount, 'cash_to_safe', reversalDescription); else if (type.includes('Pervedimas į banką')) handleTransferConfirm(amount, 'bank_to_safe', reversalDescription); else if (type.includes('Pervedimas iš banko')) handleTransferConfirm(amount, 'safe_to_bank', reversalDescription); else if (type.includes('Dienos uždarymas (Z)')) { const cashMatch = transaction.description.match(/Grynais: ([\d.]+)/); const cardMatch = transaction.description.match(/Kortele: ([\d.]+)/); const cashAmount = cashMatch ? parseFloat(cashMatch[1]) : 0; const cardAmount = cardMatch ? parseFloat(cardMatch[1]) : 0; const newCash = cashRegisterBalance - cashAmount; const newBank = bankBalance - cardAmount; setCashRegisterBalance(newCash); setBankBalance(newBank); addTransaction("Z Ataskaitos Atšaukimas", transaction.amount, newCash, safeBalance, newBank, reversalDescription); } else { showCustomAlert("Klaida", "Šio tipo operacijos (pvz., korekcijos) negalima atšaukti."); } } else { removeTransactionById(transaction.id); showCustomAlert("Atlikta", "Operacijos įrašas ištrintas."); }}}]); };
    const handleIncomeConfirm = (amount, type, comment) => { switch(type) { case 'cash_in': { const n = cashRegisterBalance + amount; setCashRegisterBalance(n); addTransaction('Įplaukos (grynais)', amount, n, safeBalance, bankBalance, comment); break; } case 'safe_in': { const n = safeBalance + amount; setSafeBalance(n); addTransaction('Įplaukos į seifą', amount, cashRegisterBalance, n, bankBalance, comment); break; } case 'card_in': case 'transfer_in': { const n = bankBalance + amount; setBankBalance(n); const d = type === 'card_in' ? 'Įplaukos (kortele)' : 'Įplaukos (pavedimu)'; addTransaction(d, amount, cashRegisterBalance, safeBalance, n, comment); break; }}};
    const handleExpenseConfirm = (amount, description, source) => { switch(source) { case 'cash_out': { if (amount > cashRegisterBalance) return showCustomAlert('Klaida','Kasoje nepakanka pinigų.'); const n=cashRegisterBalance - amount; setCashRegisterBalance(n); addTransaction('Išlaidos (iš kasos)', amount, n, safeBalance, bankBalance, description); break; } case 'safe_out': { if (amount > safeBalance) return showCustomAlert('Klaida','Seife nepakanka pinigų.'); const n=safeBalance - amount; setSafeBalance(n); addTransaction('Išlaidos (iš seifo)', amount, cashRegisterBalance, n, bankBalance, description); break; } case 'transfer_out': case 'online_out': { if (amount > bankBalance) return showCustomAlert('Klaida','Banke nepakanka pinigų.'); const n=bankBalance - amount; setBankBalance(n); const d = source === 'transfer_out' ? 'Išlaidos (pavedimu)' : 'Išlaidos (internetu)'; addTransaction(d, amount, cashRegisterBalance, safeBalance, n, description); break; }}};
    const handleTransferConfirm = (amount, type, comment) => { switch(type) { case 'cash_to_safe': { if (amount > cashRegisterBalance) return showCustomAlert('Klaida','Kasoje nepakanka pinigų.'); const nC=cashRegisterBalance-amount; const nS=safeBalance+amount; setCashRegisterBalance(nC); setSafeBalance(nS); addTransaction('Pervedimas į seifą',amount,nC,nS,bankBalance,comment); break; } case 'safe_to_cash': { if (amount > safeBalance) return showCustomAlert('Klaida','Seife nepakanka pinigų.'); const nC=cashRegisterBalance+amount; const nS=safeBalance-amount; setCashRegisterBalance(nC); setSafeBalance(nS); addTransaction('Pervedimas iš seifo',amount,nC,nS,bankBalance,comment); break; } case 'safe_to_bank': { if (amount > safeBalance) return showCustomAlert('Klaida','Seife nepakanka pinigų.'); const nS=safeBalance-amount; const nB=bankBalance+amount; setSafeBalance(nS); setBankBalance(nB); addTransaction('Pervedimas į banką',amount,cashRegisterBalance,nS,nB,comment); break; } case 'bank_to_safe': { if (amount > bankBalance) return showCustomAlert('Klaida','Banke nepakanka pinigų.'); const nB=bankBalance-amount; const nS=safeBalance+amount; setBankBalance(nB); setSafeBalance(nS); addTransaction('Pervedimas iš banko',amount,cashRegisterBalance,nS,nB,comment); break; }}};
    const handleUpdateFromCounter = (newBalance) => { const diff=newBalance-cashRegisterBalance; if (diff===0) return; const type=diff > 0 ? 'Likučio korekcija (+)' : 'Likučio korekcija (Išėmimas)'; setCashRegisterBalance(newBalance); addTransaction(type,Math.abs(diff),newBalance,safeBalance,bankBalance,'Automatinis atnaujinimas per skaičiuotuvą.'); showCustomAlert('Atnaujinta',`Kasos likutis atnaujintas į ${newBalance.toFixed(2)} EUR.`); };
    const handleZReportConfirm = ({ cash, card, customers, total }) => { const nC=cashRegisterBalance+cash; const nB=bankBalance+card; setCashRegisterBalance(nC); setBankBalance(nB); const d=`Grynais: ${cash.toFixed(2)}, Kortele: ${card.toFixed(2)}, Pirkėjai: ${customers}. Bendra apyvarta: ${total.toFixed(2)} EUR.`; addTransaction('Dienos uždarymas (Z)',total,nC,safeBalance,nB,d); showCustomAlert('Diena uždaryta','Z ataskaitos duomenys sėkmingai suvesti.'); };
    const renderTransactionItem = ({ item }) => { const isPositive = item.type.includes('Įplauk') || item.type.includes('iš seifo') || item.type.includes('(+)'); return ( <TouchableOpacity onLongPress={() => handleLongPressTransaction(item)} style={styles.historyItem}><View style={styles.historyIconContainer}><Text style={styles.historyIcon}>{isPositive ? '➕' : '➖'}</Text></View><View style={styles.historyTextContainer}><Text style={styles.historyType}>{item.type}</Text>{!!item.description && <Text style={styles.historyDescription}>{item.description}</Text>}<Text style={styles.historyDate}>{new Date(item.timestamp).toLocaleString('lt-LT')}</Text></View><Text style={[styles.historyAmount, isPositive ? styles.amountPositive : styles.amountNegative]}>{isPositive ? '+' : '-'}{item.amount.toFixed(2)}</Text></TouchableOpacity> ); };
    const renderSnapshotItem = ({ item }) => { const isExpanded = expandedSnapshotId === item.id; return ( <View style={styles.historyItemWrapper}><TouchableOpacity onPress={() => { LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut); setExpandedSnapshotId(isExpanded ? null : item.id); }} style={styles.historyItem}><View style={styles.historyIconContainer}><Text style={styles.historyIcon}>📋</Text></View><View style={styles.historyTextContainer}><Text style={styles.historyType}>Išsaugotas likutis</Text><Text style={styles.historyDescription}>Bendra suma: {item.totalSum.toFixed(2)} EUR</Text><Text style={styles.historyDate}>{new Date(item.date).toLocaleString('lt-LT')}</Text></View><TouchableOpacity style={styles.deleteButton} onPress={() => handleDeleteSnapshot(item.id)}><Text style={styles.deleteButtonText}>⊗</Text></TouchableOpacity></TouchableOpacity>{isExpanded && (<View style={styles.snapshotDetails}><Text style={styles.snapshotDetailsTitle}>Detali Sudėtis:</Text>{denominations.map(denom => { const key=`val_${String(denom.value).replace('.','_')}`; const count=item.counts[key]||0; if(count > 0) { return <Text key={key} style={styles.snapshotDetailText}>{denom.value.toFixed(2)} EUR x {count}</Text>; } return null; })}</View>)}</View> ); };

    return (
        <SafeAreaView style={styles.safeArea}>
            <View style={styles.balanceContainer}><Text style={styles.balanceLabel}>Kasos Likutis</Text><Text style={styles.balanceAmount}>{(Number(cashRegisterBalance) || 0).toFixed(2)} EUR</Text><View style={styles.subBalanceContainer}><Text style={styles.subBalanceText}>Seife: {(Number(safeBalance) || 0).toFixed(2)} EUR</Text><Text style={styles.subBalanceText}>Banke: {(Number(bankBalance) || 0).toFixed(2)} EUR</Text></View></View>
            <View style={styles.actionsGrid}><TouchableOpacity style={[styles.actionButton, {backgroundColor: colors.accent}]} onPress={() => setModal({...modal, income: true})}><Text style={styles.actionButtonText}>+ Įplaukos</Text></TouchableOpacity><TouchableOpacity style={[styles.actionButton, {backgroundColor: colors.warning}]} onPress={() => setModal({...modal, expense: true})}><Text style={styles.actionButtonText}>- Išėmimas</Text></TouchableOpacity><TouchableOpacity style={[styles.actionButton, {backgroundColor: '#A569BD'}]} onPress={() => setModal({...modal, transfer: true})}><Text style={styles.actionButtonText}>⇄ Pervedimai</Text></TouchableOpacity><TouchableOpacity style={[styles.actionButton, {backgroundColor: colors.textSecondary}]} onPress={() => setModal({...modal, counter: true})}><Text style={styles.actionButtonText}>🧮 Skaičiuotuvas</Text></TouchableOpacity></View>
            <View style={styles.zReportButtonContainer}><TouchableOpacity style={styles.zReportButton} onPress={() => setModal({...modal, zReport: true})}><Text style={styles.zReportButtonText}>🌅 Dienos Uždarymas (Z Ataskaita)</Text></TouchableOpacity></View>
            <View style={styles.tabContainer}><TouchableOpacity style={[styles.tabButton, activeTab === 'transactions' && styles.tabButtonActive]} onPress={() => setActiveTab('transactions')}><Text style={[styles.tabText, activeTab === 'transactions' && styles.tabTextActive]}>Operacijos</Text></TouchableOpacity><TouchableOpacity style={[styles.tabButton, activeTab === 'snapshots' && styles.tabButtonActive]} onPress={() => setActiveTab('snapshots')}><Text style={[styles.tabText, activeTab === 'snapshots' && styles.tabTextActive]}>Skaičiavimai</Text></TouchableOpacity></View>
            {activeTab === 'transactions' ? ( <FlatList data={transactions} renderItem={renderTransactionItem} keyExtractor={item => String(item.id)} style={styles.list} ListEmptyComponent={<Text style={globalStyles.noDataText}>Operacijų nėra.</Text>} /> ) : ( <FlatList data={snapshots} renderItem={renderSnapshotItem} keyExtractor={item => String(item.id)} style={styles.list} ListEmptyComponent={<Text style={globalStyles.noDataText}>Išsaugotų skaičiavimų nėra.</Text>} /> )}
            <IncomeModal visible={modal.income} onClose={() => setModal({...modal, income: false})} onConfirm={handleIncomeConfirm} />
            <ExpenseModal visible={modal.expense} onClose={() => setModal({...modal, expense: false})} onConfirm={handleExpenseConfirm} />
            <TransferModal visible={modal.transfer} onClose={() => setModal({...modal, transfer: false})} onConfirm={handleTransferConfirm} />
            <CashCounterModal visible={modal.counter} onClose={() => setModal({...modal, counter: false})} onSave={handleSaveSnapshot} onUpdate={handleUpdateFromCounter} />
            <ZReportModal visible={modal.zReport} onClose={() => setModal({...modal, zReport: false})} onConfirm={handleZReportConfirm} />
            <PinModal visible={modal.pin} onClose={() => setModal({...modal, pin: false})} onConfirm={handlePinConfirm} />
        </SafeAreaView>
    );
}